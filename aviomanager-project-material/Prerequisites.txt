1. Опис на сценарио
Во ова сценарио е опфатен процесот на менаџирање, организирање и креирање на авионски летови. За еден лет секогаш треба да има информации за местото, односно земјата на полетување, како и земјата на слетување. За повеќе различни летови се користат различни авиони, кои варираат според моделот и бројот на седишта. Со тоа, за секој лет мора да се знае моделот на авионот кој се користел за овозможување на тој лет. Исто така, за секој лет треба да се води сметка и за вкупниот број на учесници, датум и време на полетување и слетување, како и тековна состојба на летот (незапочнат, во тек или завршен). За организирањето на самите летови мора да постојат луѓе кои учествуваат во тие летови, односно мора да постојат патници и екипаж (стјуарди/стјуардеси и пилоти). Токму затоа, за секој човек кој учествува во летот мора да се знае улогата и да се знаат личните информации, како име, презиме, ЕМБГ и место на раѓање (држава), како и соодветниот лет во кој што учествува. За секој пилот дополнително се чува и работното искуство (во години), а за секој стјуард/стјуардеса дополнително се чува и бројот на летови во кои има учествувано. Напомена: мора да се запази фактот дека учесникот може да учествува во само еден лет во даден момент.



2. Ентитети, релации и ЕР дијаграм
Person - ентитет за роља/човек од овој контекст. Содржи надворешен клуч до Country ентитетот.
FlightAttendant - тип на Person (стјуард/стјуардеса)
Passenger - тип на Person (патник)
Pilot - тип на Person (пилот)
Country - ентитет за земја
FlightParticipant - ентитет за учесник во даден лет. Содржи надворешен клуч до Person ентитетот.
Flight - ентитет за лет. Содржи два надворешни клучеви до Country ентитетот (за departure и destination) и еден надворешен клуч до Plane ентитетот.
Plane - ентитет за авион



3. Атрибути
Person
id (LONG - DomainObjectId -> PersonId)
name (VARCHAR - String)
surname (VARCHAR - String)
country_id (LONG - DomainObjectId -> CountryId) - FK*
Pilot
years (number - Integer)
FlightAttendant
numFlights (NUMBER - NumberOfUnits)
Passenger - само основните атрибути од родителот


State
id (LONG - DomainObjectId -> CountryId)
name (VARCHAR - String)


FlightParticipant
id (LONG - DomainObjectId -> FlightParticipantId)
role (VARCHAR - ParticipantRole)
person_id (LONG - DomainObjectId -> PersonId) - FK*
flight_id (LONG - DomainObjectId -> FlightId) - FK*

Flight
id (LONG - DomainObjectId -> FlightId)
departureDate (TIMESTAMP - LocalDateTime)
arrivalDate (TIMESTAMP - LocalDateTime)
numPassengers (NUMBER - NumberOfUnits)
status (VARCHAR - FlightStatus)
departure_country_id (LONG - DomainObjectId - CountryId) - FK*
destination_country_id (LONG - DomainObjectId - CountryId) - FK*
plane_id (LONG - DomainObjectId - PlaneId) - FK*


Plane
id (LONG - DomainObjectId - PlaneId)
model (VARCHAR - Model)
numSeats (NUMBER - Integer)



4. Ограничени контексти
Четири Bounded Contexts/Ограничени контексти:

Role/Person Bounded Context - го опфаќа Person ентитетот, заедно со неговите деца.
Country Bounded Context - го опфаќа Country ентитетот.
Flight Bounded Context - ги опфаќа Flight и FlightParticipant ентитетите.
Plane Bounded Context - го опфаќа Plane ентитетот.



5. Агрегати во ограничени контексти
Role/Person Bounded Context - Person, FlightAttendant, Passenger, Pilot
Country Bounded Context - Country
Flight Bounded Context - Flight, FlightParticipant
Plane Bounded Context - Plane



6. Агрегатни корени во ограничените контексти
Role/Person Bounded Context - Person
Country Bounded Context - Country
Flight Bounded Context - Flight
Plane Bounded Context - Plane


7. Бизнис правила (за конзистентност)
За да може да се организира/постои еден лет, мора да постојат патници, пилот (и ко-пилот) и екипаж во тој лет.
Една личност може да биде само една од трите улоги (својство на дисјунктност).
Секој учесник во летот мора да соодвествува само на една личност.
Секој лет мора да има една држава на полетување и една држава на слетување.
Датумите на полетување и слетување мора да бидат целосни timestamps (и датум и време).
Атрибутот за моделот на авионот претставува целосното име на самиот авион.
Сите патници треба да може да купат карта/да се пријават за одреден лет. Членови на екипажот и пилотите исто така треба да може да се пријавуваат на сите летови во кои ќе учествуваат. Притоа, во материјализирано View се води евиденција за присуството - се чуваат информациите за учесниците, нивните улоги, информации за летот и бројот на патници за секој лет.
Plane и State се обични utility (помошни) агрегати кои ги користат Person и Flight BCs.
Во рамки на Flight ограничениот контекст ќе се врши најголемиот дел од имплементацијата на овие бизнис правила.



8. Вредносни објекти (value objects)
PersonId - за пристап до Person BC
CountryId - за пристап до Country BC
PlaneId - за пристап до Plane BC
NumberOfUnits - ќе се користи во Person BC и Flight BC за одредување и ажурирање на бројот на патници во летот и за ажурирање на бројот на летови (за FlightAttendant). Во оваа класа ќе имам методи за додавање, одземање и креирање на нови NumberOfUnits објекти со соодветни вредности. Оваа класа нема да се користи кај Plane BC, бидејќи бројот на седишта секогаш е статичен, додека пак кај Flight BC бројот на патници во летот може да се промени, исто и кај Person BC бројот на летови во кои имаат учествувано стјуардите/стјуардесите треба да може да се инкрементира.
FlightDate - ќе се користи во Flight BC за поставување на датумите и времињата на полетување и слетување.



9. Настани кои треба да протекуваат меѓу агрегатите
Кога ќе се креира нов лет и при секое пријавување на учесник во тој лет, треба да се публикува настан кој треба да биде соодветно handled и да се обезбеди refresh на материјализираното view и со тоа, да се обезбеди конзистентност на податоците во самата апликација.
При секоја промена во било која од информациите за некој лет треба да се врши тој refresh.
По секое завршување на лет (слетување), треба да се публикува настан од страна на Flight BC до Person BC и да се инкрементира бројот на летови во кои имаат учествувано стјуардите/стјуардесите. Со промената/инкрементирањето на таа бројка (или било која друга промена на податок за личностите), треба да се овозможи публикување на настан кој ќе биде handled, со што ќе се направи refresh на материјализираното view и ќе се ажурираат податоците во тоа view кои кореспондираат со променетата торка од табелата за личности.
По секое завршување на лет (слетување) треба да се избришат податоците поврзани со тој лет (од Flight табелата, а по refresh и од материјализираното view).
Исто така, може по секое слетување да се овозможи логирање на избришаните податоци (logging system)











