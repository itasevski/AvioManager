[{"C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\index.js":"1","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\reportWebVitals.js":"2","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\App\\App.js":"3","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Header\\Header.js":"4","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Flight\\Flight.js":"5","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Utilities\\StyledTableRow\\StyledTableRow.js":"6","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Utilities\\StyledTableCell\\StyledTableCell.js":"7","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Flight\\FlightItem\\FlightItem.js":"8","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Plane\\Plane.js":"9","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Country\\Country.js":"10","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Person\\Person.js":"11","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Person\\PersonItem\\PersonItem.js":"12","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Plane\\PlaneItem\\PlaneItem.js":"13","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Country\\CountryItem\\CountryItem.js":"14","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Flight\\CreateFlight\\CreateFlight.js":"15","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Flight\\CreateFlight\\CreateFlightForm\\CreateFlightForm.js":"16","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Utilities\\FormStyles\\FormStyles.js":"17","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Person\\CreatePerson\\CreatePerson.js":"18","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Person\\CreatePerson\\CreatePersonForm\\CreatePersonForm.js":"19","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Country\\CreateCountry\\CreateCountry.js":"20","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Plane\\CreatePlane\\CreatePlane.js":"21","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Country\\CreateCountry\\CreateCountryForm\\CreateCountryForm.js":"22","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Plane\\CreatePlane\\CreatePlaneForm\\CreatePlaneForm.js":"23","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Services\\AviomanagerService.js":"24","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Utilities\\AxiosAviomanager\\AxiosAviomanager.js":"25","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Flight\\FlightParticipants\\FlightParticipants.js":"26","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Flight\\FlightParticipants\\FlightParticipant\\FlightParticipant.js":"27","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Flight\\AddFlightParticipant\\AddFlightParticipant.js":"28","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Flight\\AddFlightParticipant\\AddFlightParticipantForm\\AddFlightParticipantForm.js":"29"},{"size":532,"mtime":1630254163894,"results":"30","hashOfConfig":"31"},{"size":375,"mtime":1629833648485,"results":"32","hashOfConfig":"31"},{"size":7958,"mtime":1630665159629,"results":"33","hashOfConfig":"31"},{"size":1380,"mtime":1630343593564,"results":"34","hashOfConfig":"31"},{"size":3112,"mtime":1630618468912,"results":"35","hashOfConfig":"31"},{"size":280,"mtime":1630257955981,"results":"36","hashOfConfig":"31"},{"size":290,"mtime":1630259051400,"results":"37","hashOfConfig":"31"},{"size":2955,"mtime":1630664819288,"results":"38","hashOfConfig":"31"},{"size":2144,"mtime":1630514925565,"results":"39","hashOfConfig":"31"},{"size":2179,"mtime":1630515114813,"results":"40","hashOfConfig":"31"},{"size":2518,"mtime":1630517587083,"results":"41","hashOfConfig":"31"},{"size":1378,"mtime":1630515114813,"results":"42","hashOfConfig":"31"},{"size":795,"mtime":1630514925549,"results":"43","hashOfConfig":"31"},{"size":809,"mtime":1630515114844,"results":"44","hashOfConfig":"31"},{"size":1160,"mtime":1630599303991,"results":"45","hashOfConfig":"31"},{"size":10059,"mtime":1630607953586,"results":"46","hashOfConfig":"31"},{"size":964,"mtime":1630270415611,"results":"47","hashOfConfig":"31"},{"size":1091,"mtime":1630599303929,"results":"48","hashOfConfig":"31"},{"size":5802,"mtime":1630605661875,"results":"49","hashOfConfig":"31"},{"size":1101,"mtime":1630599304038,"results":"50","hashOfConfig":"31"},{"size":1075,"mtime":1630599303976,"results":"51","hashOfConfig":"31"},{"size":3180,"mtime":1630601963793,"results":"52","hashOfConfig":"31"},{"size":3109,"mtime":1630602107713,"results":"53","hashOfConfig":"31"},{"size":3048,"mtime":1630664179831,"results":"54","hashOfConfig":"31"},{"size":178,"mtime":1630254402609,"results":"55","hashOfConfig":"31"},{"size":2739,"mtime":1630618451066,"results":"56","hashOfConfig":"31"},{"size":847,"mtime":1630664819273,"results":"57","hashOfConfig":"31"},{"size":1311,"mtime":1630664179847,"results":"58","hashOfConfig":"31"},{"size":3635,"mtime":1630664893113,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"uusqzm",{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"62"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"62"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"62"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},"C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\index.js",[],["124","125"],"C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\App\\App.js",[],"C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Header\\Header.js",[],"C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Flight\\Flight.js",[],"C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Utilities\\StyledTableRow\\StyledTableRow.js",[],"C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Utilities\\StyledTableCell\\StyledTableCell.js",[],"C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Flight\\FlightItem\\FlightItem.js",[],"C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Plane\\Plane.js",[],"C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Country\\Country.js",[],"C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Person\\Person.js",[],"C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Person\\PersonItem\\PersonItem.js",[],"C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Plane\\PlaneItem\\PlaneItem.js",[],"C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Country\\CountryItem\\CountryItem.js",[],"C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Flight\\CreateFlight\\CreateFlight.js",[],"C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Flight\\CreateFlight\\CreateFlightForm\\CreateFlightForm.js",["126","127"],"import React, {useEffect} from \"react\";\r\nimport {Box, Button, FormLabel, Grid, TextField} from \"@material-ui/core\";\r\nimport {KeyboardDatePicker, KeyboardTimePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {Autocomplete} from \"@material-ui/lab\";\r\nimport {Link, useHistory} from \"react-router-dom\";\r\nimport {format} from \"date-fns\";\r\n\r\nconst CreateFlightForm = (props) => {\r\n    const history = useHistory();\r\n\r\n    const [state, setState] = React.useState({\r\n        departureDate: new Date(),\r\n        arrivalDate: new Date(),\r\n        departureCountryId: \"\",\r\n        destinationCountryId: \"\",\r\n        planeId: \"\",\r\n\r\n        countries: [],\r\n        planes: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        setState({\r\n            ...state,\r\n            countries: props.countries,\r\n            planes: props.planes\r\n        });\r\n    }, [props.countries]);\r\n\r\n    const handleDepartureDateChange = (date) => {\r\n        setState({\r\n            ...state,\r\n            departureDate: date\r\n        });\r\n    };\r\n\r\n    const handleArrivalDateChange = (date) => {\r\n        setState({\r\n            ...state,\r\n            arrivalDate: date\r\n        });\r\n    };\r\n\r\n    const handleFieldChange = (event) => {\r\n        setState({\r\n            ...state,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    const handleFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const departureCountryName = document.getElementById(\"departureCountry\").value;\r\n        const destinationCountryName = document.getElementById(\"destinationCountry\").value;\r\n        const planeName = document.getElementById(\"planeName\").value;\r\n\r\n        const departureDate = format(state.departureDate, \"dd/MM/yyyy HH:mm\");\r\n        const arrivalDate = format(state.arrivalDate, \"dd/MM/yyyy HH:mm\");\r\n        const departureCountryId = state.countries.find(country => country.countryName === departureCountryName).id.id;\r\n        const destinationCountryId = state.countries.find(country => country.countryName === destinationCountryName).id.id;\r\n        const planeId = state.planes.find(plane => plane.planeName === planeName).id.id;\r\n\r\n        props.createFlight(departureDate, arrivalDate, departureCountryId, destinationCountryId, planeId);\r\n        history.push(\"/flights\");\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <form onSubmit={handleFormSubmit}>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={7}>\r\n                        <FormLabel htmlFor=\"date\">Departure date</FormLabel>\r\n                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                            <KeyboardDatePicker\r\n                                required\r\n                                fullWidth\r\n                                margin=\"normal\"\r\n                                id=\"departureDate\"\r\n                                name=\"departureDate\"\r\n                                label=\"Pick a date\"\r\n                                format=\"dd/MM/yyyy\"\r\n                                value={state.departureDate}\r\n                                onChange={handleDepartureDateChange}\r\n                                KeyboardButtonProps={{\r\n                                    'aria-label': 'change date',\r\n                                }}\r\n                            />\r\n                        </MuiPickersUtilsProvider>\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                        <FormLabel htmlFor=\"time\">Departure time</FormLabel>\r\n                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                            <KeyboardTimePicker\r\n                                required\r\n                                fullWidth\r\n                                margin=\"normal\"\r\n                                id=\"departureTime\"\r\n                                name=\"departureTime\"\r\n                                label=\"Pick a time\"\r\n                                value={state.departureDate}\r\n                                onChange={handleDepartureDateChange}\r\n                                KeyboardButtonProps={{\r\n                                    'aria-label': 'change time',\r\n                                }}\r\n                            />\r\n                        </MuiPickersUtilsProvider>\r\n                    </Grid>\r\n                    <Grid item xs={7}>\r\n                        <FormLabel htmlFor=\"date\">Arrival date</FormLabel>\r\n                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                            <KeyboardDatePicker\r\n                                required\r\n                                fullWidth\r\n                                margin=\"normal\"\r\n                                id=\"arrivalDate\"\r\n                                name=\"arrivalDate\"\r\n                                label=\"Pick a date\"\r\n                                format=\"dd/MM/yyyy\"\r\n                                value={state.arrivalDate}\r\n                                onChange={handleArrivalDateChange}\r\n                                KeyboardButtonProps={{\r\n                                    'aria-label': 'change date',\r\n                                }}\r\n                            />\r\n                        </MuiPickersUtilsProvider>\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                        <FormLabel htmlFor=\"time\">Arrival time</FormLabel>\r\n                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                            <KeyboardTimePicker\r\n                                required\r\n                                fullWidth\r\n                                margin=\"normal\"\r\n                                id=\"arrivalTime\"\r\n                                name=\"arrivalTime\"\r\n                                label=\"Pick a time\"\r\n                                value={state.arrivalDate}\r\n                                onChange={handleArrivalDateChange}\r\n                                KeyboardButtonProps={{\r\n                                    'aria-label': 'change time',\r\n                                }}\r\n                            />\r\n                        </MuiPickersUtilsProvider>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <FormLabel htmlFor=\"departureCountry\">Departure country</FormLabel>\r\n                        <Autocomplete\r\n                            options={state.countries}\r\n                            freeSolo\r\n                            id=\"departureCountry\"\r\n                            getOptionLabel={(option) => option.countryName}\r\n                            renderInput={(params) => <TextField {...params}\r\n                                                                label=\"Input departure country...\"\r\n                                                                name=\"departureCountry\"\r\n                                                                required\r\n                                                                />}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <FormLabel htmlFor=\"destination\">Destination</FormLabel>\r\n                        <Autocomplete\r\n                            options={state.countries}\r\n                            freeSolo\r\n                            id=\"destinationCountry\"\r\n                            getOptionLabel={(option) => option.countryName}\r\n                            renderInput={(params) => <TextField {...params}\r\n                                                                label=\"Input destination country...\"\r\n                                                                name=\"destinationCountry\"\r\n                                                                required\r\n                                                                />}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <FormLabel htmlFor=\"planeName\">Plane model name</FormLabel>\r\n                        <Autocomplete\r\n                            options={state.planes}\r\n                            freeSolo\r\n                            id=\"planeName\"\r\n                            getOptionLabel={(option) => option.planeName}\r\n                            renderInput={(params) => <TextField {...params}\r\n                                                                label=\"Input plane model name...\"\r\n                                                                name=\"planeName\"\r\n                                                                required\r\n                                                                />}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Box mt={2}>\r\n                            <Grid container justifyContent=\"flex-end\">\r\n                                <Link to=\"/flights\" style={{ textDecoration: \"none\", marginRight: \"15px\" }}>\r\n                                    <Button\r\n                                        type=\"button\"\r\n                                        color=\"primary\"\r\n                                        variant=\"outlined\"\r\n                                    >\r\n                                        Cancel\r\n                                    </Button>\r\n                                </Link>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                >\r\n                                    Create\r\n                                </Button>\r\n                            </Grid>\r\n                        </Box>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default CreateFlightForm;","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Utilities\\FormStyles\\FormStyles.js",[],"C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Person\\CreatePerson\\CreatePerson.js",[],"C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Person\\CreatePerson\\CreatePersonForm\\CreatePersonForm.js",["128"],"import React, {useEffect} from \"react\";\r\nimport {Box, Button, FormLabel, Grid, TextField} from \"@material-ui/core\";\r\nimport {Autocomplete} from \"@material-ui/lab\";\r\nimport {Link, useHistory} from \"react-router-dom\";\r\n\r\nconst CreatePersonForm = (props) => {\r\n    const history = useHistory();\r\n\r\n    const [state, setState] = React.useState({\r\n        name: \"\",\r\n        surname: \"\",\r\n        countryId: \"\",\r\n        numFlights: \"\",\r\n        yearsExperience: \"\",\r\n\r\n        countries: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        setState({\r\n            ...state,\r\n            countries: props.countries\r\n        });\r\n    }, [props.countries]);\r\n\r\n\r\n    const handleFieldChange = (event) => {\r\n        setState({\r\n            ...state,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    const handleFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const countryName = document.getElementById(\"nationality\").value;\r\n\r\n        const name = state.name;\r\n        const surname = state.surname;\r\n        const countryId = state.countries.find(country => country.countryName === countryName).id.id;\r\n        const numFlights = state.numFlights !== \"\" ? state.numFlights : null;\r\n        const yearsExperience = state.yearsExperience !== \"\" ? state.yearsExperience : null;\r\n\r\n        props.createPerson(name, surname, countryId, numFlights, yearsExperience);\r\n        history.push(\"/people\");\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <form onSubmit={handleFormSubmit}>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <FormLabel htmlFor=\"departureCountry\">Name</FormLabel>\r\n                        <TextField label=\"Input person name...\"\r\n                                   id=\"name\"\r\n                                   name=\"name\"\r\n                                   fullWidth\r\n                                   required\r\n                                   onChange={handleFieldChange}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <FormLabel htmlFor=\"departureCountry\">Surname</FormLabel>\r\n                        <TextField label=\"Input person surname...\"\r\n                                   id=\"surname\"\r\n                                   name=\"surname\"\r\n                                   fullWidth\r\n                                   required\r\n                                   onChange={handleFieldChange}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <FormLabel htmlFor=\"nationality\">Nationality</FormLabel>\r\n                        <Autocomplete\r\n                            options={state.countries}\r\n                            freeSolo\r\n                            id=\"nationality\"\r\n                            getOptionLabel={(option) => option.countryName}\r\n                            renderInput={(params) => <TextField {...params}\r\n                                                                label=\"Input person nationality...\"\r\n                                                                name=\"nationality\"\r\n                                                                required\r\n                            />}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <FormLabel htmlFor=\"personLimit\">Flights attended (for flight attendant)</FormLabel>\r\n                        <TextField\r\n                            label=\"Input number of flights attended...\"\r\n                            id=\"numFlights\"\r\n                            name=\"numFlights\"\r\n                            type=\"number\"\r\n                            fullWidth\r\n                            onChange={handleFieldChange}\r\n                            disabled={state.yearsExperience !== \"\"}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <FormLabel htmlFor=\"personLimit\">Years experience (for pilot)</FormLabel>\r\n                        <TextField\r\n                            label=\"Input number of years experience...\"\r\n                            id=\"yearsExperience\"\r\n                            name=\"yearsExperience\"\r\n                            type=\"number\"\r\n                            fullWidth\r\n                            onChange={handleFieldChange}\r\n                            disabled={state.numFlights !== \"\"}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Box mt={2}>\r\n                            <Grid container justifyContent=\"flex-end\">\r\n                                <Link to=\"/people\" style={{ textDecoration: \"none\", marginRight: \"15px\" }}>\r\n                                    <Button\r\n                                        type=\"button\"\r\n                                        color=\"primary\"\r\n                                        variant=\"outlined\"\r\n                                    >\r\n                                        Cancel\r\n                                    </Button>\r\n                                </Link>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                >\r\n                                    Create\r\n                                </Button>\r\n                            </Grid>\r\n                        </Box>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default CreatePersonForm;","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Country\\CreateCountry\\CreateCountry.js",[],"C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Plane\\CreatePlane\\CreatePlane.js",[],"C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Country\\CreateCountry\\CreateCountryForm\\CreateCountryForm.js",["129"],"import React, {useEffect} from \"react\";\r\nimport {Box, Button, FormLabel, Grid, TextField} from \"@material-ui/core\";\r\nimport {Autocomplete} from \"@material-ui/lab\";\r\nimport {Link} from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst CreateCountryForm = (props) => {\r\n    const history = useHistory();\r\n\r\n    const [state, setState] = React.useState({\r\n        countries: []\r\n    });\r\n\r\n    useEffect(() => {\r\n       setState({\r\n           ...state,\r\n           countries: props.countries\r\n       });\r\n    }, [props.countries]);\r\n\r\n\r\n    const handleFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const countryName = document.getElementById(\"countryName\").value;\r\n\r\n        props.createCountry(countryName);\r\n        history.push(\"/countries\");\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <form onSubmit={handleFormSubmit}>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <FormLabel htmlFor=\"countryName\">Country name</FormLabel>\r\n                        <Autocomplete\r\n                            options={state.countries}\r\n                            freeSolo\r\n                            id=\"countryName\"\r\n                            getOptionLabel={(option) => option.countryName}\r\n                            renderInput={(params) => <TextField {...params}\r\n                                                                label=\"Input country name...\"\r\n                                                                name=\"countryName\"\r\n                                                                required\r\n                            />}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <span style={{ color: \"red\" }}>First add the input string to the list of CountryName enum values in the Shared Kernel, then create the Country.</span>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Box mt={2}>\r\n                            <Grid container justifyContent=\"flex-end\">\r\n                                <Link to=\"/countries\" style={{ textDecoration: \"none\", marginRight: \"15px\" }}>\r\n                                    <Button\r\n                                        type=\"button\"\r\n                                        color=\"primary\"\r\n                                        variant=\"outlined\"\r\n                                    >\r\n                                        Cancel\r\n                                    </Button>\r\n                                </Link>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                >\r\n                                    Create\r\n                                </Button>\r\n                            </Grid>\r\n                        </Box>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default CreateCountryForm;","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Plane\\CreatePlane\\CreatePlaneForm\\CreatePlaneForm.js",["130"],"import React, {useEffect} from \"react\";\r\nimport {Box, Button, FormLabel, Grid, TextField} from \"@material-ui/core\";\r\nimport {Autocomplete} from \"@material-ui/lab\";\r\nimport {Link, useHistory} from \"react-router-dom\";\r\n\r\nconst CreatePlaneForm = (props) => {\r\n    const history = useHistory();\r\n\r\n    const [state, setState] = React.useState({\r\n        planes: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        setState({\r\n            ...state,\r\n            planes: props.planes\r\n        });\r\n    }, [props.planes]);\r\n\r\n    const handleFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const planeName = document.getElementById(\"planeName\").value;\r\n\r\n        props.createPlane(planeName);\r\n        history.push(\"/planes\");\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <form onSubmit={handleFormSubmit}>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <FormLabel htmlFor=\"planeName\">Plane model name</FormLabel>\r\n                        <Autocomplete\r\n                            options={state.planes}\r\n                            freeSolo\r\n                            id=\"planeName\"\r\n                            getOptionLabel={(option) => option.planeName}\r\n                            renderInput={(params) => <TextField {...params}\r\n                                                                label=\"Input plane model name...\"\r\n                                                                name=\"planeName\"\r\n                                                                required\r\n                            />}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <span style={{ color: \"red\" }}>First add the input string to the list of PlaneName enum values in the Shared Kernel, then create the Plane.</span>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Box mt={2}>\r\n                            <Grid container justifyContent=\"flex-end\">\r\n                                <Link to=\"/planes\" style={{ textDecoration: \"none\", marginRight: \"15px\" }}>\r\n                                    <Button\r\n                                        type=\"button\"\r\n                                        color=\"primary\"\r\n                                        variant=\"outlined\"\r\n                                    >\r\n                                        Cancel\r\n                                    </Button>\r\n                                </Link>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                >\r\n                                    Create\r\n                                </Button>\r\n                            </Grid>\r\n                        </Box>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default CreatePlaneForm;","C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Services\\AviomanagerService.js",[],"C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Utilities\\AxiosAviomanager\\AxiosAviomanager.js",[],"C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Flight\\FlightParticipants\\FlightParticipants.js",[],"C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Flight\\FlightParticipants\\FlightParticipant\\FlightParticipant.js",[],"C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Flight\\AddFlightParticipant\\AddFlightParticipant.js",[],"C:\\Users\\Ivo\\Desktop\\Active Projects\\AvioManager\\aviomanager-frontend\\src\\Components\\Flight\\AddFlightParticipant\\AddFlightParticipantForm\\AddFlightParticipantForm.js",["131"],"import React, {useEffect} from \"react\";\r\nimport {Box, Button, FormLabel, Grid, TextField, Typography} from \"@material-ui/core\";\r\nimport {Autocomplete} from \"@material-ui/lab\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst AddFlightParticipantForm = (props) => {\r\n    const [state, setState] = React.useState({\r\n        people: [],\r\n        addedFlightParticipants: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        setState({\r\n            ...state,\r\n            people: props.people\r\n        });\r\n    }, [props.people]);\r\n\r\n\r\n    const handleFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const person = document.getElementById(\"person\").value;\r\n\r\n        const personId = person.split(\" \")[0];\r\n\r\n        props.addFlightParticipant(props.flightId, personId);\r\n\r\n        const addedFlightParticipants = state.addedFlightParticipants;\r\n        addedFlightParticipants.push(person + \" - SUCCESSFULLY ADDED\" )\r\n\r\n        setState({\r\n            ...state,\r\n            addedFlightParticipants: addedFlightParticipants\r\n        });\r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <form onSubmit={handleFormSubmit}>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <FormLabel htmlFor=\"person\">Person name/ID</FormLabel>\r\n                        <Autocomplete\r\n                            options={state.people}\r\n                            freeSolo\r\n                            id=\"person\"\r\n                            getOptionLabel={(option) => option.id.id + \" - \" + option.name + \" \" + option.surname}\r\n                            renderInput={(params) => <TextField {...params}\r\n                                                                label=\"Input person name or ID...\"\r\n                                                                name=\"person\"\r\n                                                                required\r\n                            />}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Box mt={3}>\r\n                        <Grid container justifyContent=\"flex-end\">\r\n                            <Link to=\"/flights\" style={{ textDecoration: \"none\", marginRight: \"15px\" }}>\r\n                                <Button\r\n                                    type=\"button\"\r\n                                    color=\"primary\"\r\n                                    variant=\"outlined\"\r\n                                >\r\n                                    Back\r\n                                </Button>\r\n                            </Link>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                            >\r\n                                Add\r\n                            </Button>\r\n                        </Grid>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Box mt={5}>\r\n                        <Grid container>\r\n                            {state.addedFlightParticipants.map((addedFlightParticipant) => {\r\n                                return (\r\n                                    <Typography variant=\"body2\">{addedFlightParticipant}</Typography>\r\n                                );\r\n                            })}\r\n                        </Grid>\r\n                    </Box>\r\n                </Grid>\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default AddFlightParticipantForm;",{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":29,"column":8,"nodeType":"138","endLine":29,"endColumn":25,"suggestions":"139"},{"ruleId":"140","severity":1,"message":"141","line":45,"column":11,"nodeType":"142","messageId":"143","endLine":45,"endColumn":28},{"ruleId":"136","severity":1,"message":"144","line":24,"column":8,"nodeType":"138","endLine":24,"endColumn":25,"suggestions":"145"},{"ruleId":"136","severity":1,"message":"144","line":19,"column":8,"nodeType":"138","endLine":19,"endColumn":25,"suggestions":"146"},{"ruleId":"136","severity":1,"message":"144","line":18,"column":8,"nodeType":"138","endLine":18,"endColumn":22,"suggestions":"147"},{"ruleId":"136","severity":1,"message":"144","line":17,"column":8,"nodeType":"138","endLine":17,"endColumn":22,"suggestions":"148"},"no-native-reassign",["149"],"no-negated-in-lhs",["150"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.planes' and 'state'. Either include them or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.","ArrayExpression",["151"],"no-unused-vars","'handleFieldChange' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.",["152"],["153"],["154"],["155"],"no-global-assign","no-unsafe-negation",{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"158","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},"Update the dependencies array to be: [props.countries, props.planes, state]",{"range":"165","text":"166"},"Update the dependencies array to be: [props.countries, state]",{"range":"167","text":"168"},{"range":"169","text":"168"},"Update the dependencies array to be: [props.planes, state]",{"range":"170","text":"171"},"Update the dependencies array to be: [props.people, state]",{"range":"172","text":"173"},[905,922],"[props.countries, props.planes, state]",[625,642],"[props.countries, state]",[536,553],[493,507],"[props.planes, state]",[503,517],"[props.people, state]"]